{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Container from \"@material-ui/core/Container\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useText } from \"../../theme/common\";\nimport { withTranslation } from \"../../i18n\";\nimport ParallaxMedium from \"../Parallax/Medium\";\nimport illustration from \"../../public/images/saas/faq.png\";\nimport Title from \"../Title\";\nimport useStyles from \"./faq-style\";\nimport api from \"../../services/api\";\nconst faqData = [{\n  q: \"Pellentesque ac bibendum tortor?\",\n  a: \"Vivamus sit amet interdum elit. Proin lacinia erat ac velit tempus auctor. \"\n}, {\n  q: \"In mi nulla, fringilla vestibulum?\",\n  a: \"Vivamus sit amet interdum elit. Proin lacinia erat ac velit tempus auctor. \"\n}, {\n  q: \"Quisque lacinia purus ut libero?\",\n  a: \"Vivamus sit amet interdum elit. Proin lacinia erat ac velit tempus auctor. \"\n}, {\n  q: \"Quisque ut metus sit amet augue?\",\n  a: \"Vivamus sit amet interdum elit. Proin lacinia erat ac velit tempus auctor. \"\n}, {\n  q: \"Pellentesque ac bibendum tortor?\",\n  a: \"Vivamus sit amet interdum elit. Proin lacinia erat ac velit tempus auctor. \"\n}];\n\nfunction Faq(props) {\n  const classes = useStyles();\n  const text = useText();\n  const {\n    0: expanded,\n    1: setExpanded\n  } = useState(0);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    0: questions,\n    1: setQuestions\n  } = useState([]);\n  const {\n    0: questionSec,\n    1: setQuestionSec\n  } = useState({});\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n  useEffect(() => {\n    setUser(window.location.host.split(\".\")[0].split(\":\")[0]);\n  }, []);\n  useEffect(() => {\n    api.get(\"read-question/\" + user).then(r => {\n      setQuestions(r.data);\n    }).catch(e => {\n      var _e$response;\n\n      if (((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 404) {}\n    });\n  }, [user]);\n  useEffect(() => {\n    api.get(\"read-questions/\" + user).then(r => {\n      setQuestionSec(r.data);\n    }).catch(e => {\n      var _e$response2;\n\n      if (((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.status) === 404) {}\n    });\n  }, [user]);\n  const {\n    t\n  } = props;\n\n  const handleChange = panel => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Container, {\n    fixed: true\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 6\n  }, __jsx(Grid, {\n    item: true,\n    md: 6\n  }, __jsx(Title, {\n    align: isMobile ? \"center\" : \"left\"\n  }, __jsx(\"strong\", null, questionSec.title)), __jsx(Typography, {\n    className: clsx(classes.text, text.subtitle2),\n    align: isMobile ? \"center\" : \"left\",\n    component: \"p\"\n  }, t(\"\" + questionSec.content)), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(\"div\", {\n    className: classes.illustration\n  }, __jsx(ParallaxMedium, null), __jsx(\"img\", {\n    src: illustration,\n    alt: \"illustration\"\n  })))), __jsx(Grid, {\n    item: true,\n    md: 6\n  }, __jsx(\"div\", {\n    className: classes.accordion\n  }, questions.map((item, index) => __jsx(\"div\", {\n    className: classes.item,\n    key: index.toString()\n  }, __jsx(Accordion, {\n    classes: {\n      root: classes.paper\n    },\n    expanded: expanded === index,\n    onChange: handleChange(index)\n  }, __jsx(AccordionSummary, {\n    classes: {\n      content: classes.content,\n      expanded: classes.expanded\n    }\n  }, __jsx(Typography, {\n    className: classes.heading\n  }, item.question), __jsx(ExpandMoreIcon, {\n    className: classes.icon\n  })), __jsx(AccordionDetails, {\n    classes: {\n      root: classes.detail\n    }\n  }, __jsx(Typography, {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  }, __jsx(\"img\", {\n    width: \"50px\",\n    height: \"50px\",\n    src: `${api.defaults.baseURL}${item.image_path.substring(1)}`\n  }), item.answer))))))))));\n}\n\nexport default withTranslation([\"saas-landing\"])(Faq);","map":null,"metadata":{},"sourceType":"module"}