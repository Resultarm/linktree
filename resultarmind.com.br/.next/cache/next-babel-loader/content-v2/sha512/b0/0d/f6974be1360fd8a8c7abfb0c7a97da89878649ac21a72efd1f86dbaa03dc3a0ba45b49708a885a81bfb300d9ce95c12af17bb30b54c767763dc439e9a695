{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { withTranslation } from \"../../i18n\";\nimport routeLink from \"../../public/text/link\";\nimport { useText } from \"../../theme/common\";\nimport Checkbox from './Checkbox';\nimport SocialAuth from './SocialAuth';\nimport Title from '../Title/TitleSecondary';\nimport AuthFrame from './AuthFrame';\nimport useStyles from './form-style';\n\nfunction Register(props) {\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const {\n    t\n  } = props;\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  useEffect(() => {\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      if (value !== values.password) {\n        return false;\n      }\n\n      return true;\n    });\n    ValidatorForm.addValidationRule('isTruthy', value => value);\n  });\n  const {\n    0: check,\n    1: setCheck\n  } = useState(false);\n\n  const handleChange = name => event => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: event.target.value\n    }));\n  };\n\n  const handleCheck = event => {\n    setCheck(event.target.checked);\n  };\n\n  const handleSubmit = () => {\n    console.log('data submited');\n  };\n\n  return __jsx(AuthFrame, {\n    title: t('common:register_title'),\n    subtitle: t('common:register_subtitle')\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.head\n  }, __jsx(Title, {\n    align: isMobile ? 'center' : 'left'\n  }, t('common:register')), __jsx(Button, {\n    size: \"small\",\n    className: classes.buttonLink,\n    href: routeLink.saas.login\n  }, __jsx(Icon, {\n    className: clsx(classes.icon, classes.signArrow)\n  }, \"arrow_forward\"), t('common:register_already'))), __jsx(SocialAuth, null), __jsx(\"div\", {\n    className: classes.separator\n  }, __jsx(Typography, null, t('common:register_or'))), __jsx(ValidatorForm, {\n    onError: errors => console.log(errors),\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    className: classes.input,\n    label: t('common:register_name'),\n    onChange: handleChange('name'),\n    name: \"name\",\n    value: values.name,\n    validators: ['required'],\n    errorMessages: ['This field is required']\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    className: classes.input,\n    label: t('common:register_email'),\n    onChange: handleChange('email'),\n    name: \"email\",\n    value: values.email,\n    validators: ['required', 'isEmail'],\n    errorMessages: ['This field is required', 'Email is not valid']\n  })), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    type: \"password\",\n    className: classes.input,\n    label: t('common:register_password'),\n    validators: ['required'],\n    onChange: handleChange('password'),\n    errorMessages: ['This field is required'],\n    name: \"password\",\n    value: values.password\n  })), __jsx(Grid, {\n    item: true,\n    md: 6,\n    xs: 12\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    type: \"password\",\n    className: classes.input,\n    label: t('common:register_confirm'),\n    validators: ['isPasswordMatch', 'required'],\n    errorMessages: ['Password mismatch', 'This field is required'],\n    onChange: handleChange('confirmPassword'),\n    name: \"confirm\",\n    value: values.confirmPassword\n  }))), __jsx(\"div\", {\n    className: classes.btnArea\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      validators: ['isTruthy'],\n      errorMessages: \"This field is required\",\n      checked: check,\n      value: check,\n      onChange: e => handleCheck(e),\n      color: \"primary\"\n    }),\n    label: __jsx(\"span\", {\n      className: text.caption\n    }, t('common:form_terms'), \"\\xA0\", __jsx(\"a\", {\n      href: \"#\"\n    }, t('common:form_privacy')))\n  }), __jsx(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"secondary\",\n    size: \"large\"\n  }, t('common:continue'))))));\n}\n\nexport default withTranslation(['common'])(Register);","map":null,"metadata":{},"sourceType":"module"}