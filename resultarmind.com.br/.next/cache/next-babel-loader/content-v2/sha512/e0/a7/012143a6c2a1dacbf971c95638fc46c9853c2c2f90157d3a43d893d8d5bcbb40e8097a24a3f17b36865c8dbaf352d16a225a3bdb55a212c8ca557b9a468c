{"ast":null,"code":"var _jsxFileName = \"D:\\\\Resultarmind\\\\linktree\\\\rmcsm\\\\resultarmind.com.br\\\\components\\\\Forms\\\\Login.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { withTranslation } from \"../../i18n\";\nimport routeLink from \"../../public/text/link\";\nimport { useText } from \"../../theme/common\";\nimport SocialAuth from './SocialAuth';\nimport Title from '../Title/TitleSecondary';\nimport AuthFrame from './AuthFrame';\nimport useStyles from './form-style';\n\nfunction Login(props) {\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const {\n    t\n  } = props;\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    email: '',\n    password: ''\n  });\n  useEffect(() => {\n    ValidatorForm.addValidationRule('isPasswordMatch', value => {\n      if (value !== values.password) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n  const {\n    0: check,\n    1: setCheck\n  } = useState(false);\n\n  const handleChange = name => event => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: event.target.value\n    }));\n  };\n\n  const handleCheck = event => {\n    setCheck(event.target.checked);\n  };\n\n  const handleSubmit = () => {\n    console.log('data submited');\n  };\n\n  return __jsx(AuthFrame, {\n    title: t('common:login_title'),\n    subtitle: t('common:login_subtitle'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classes.head,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(Title, {\n    align: isMobile ? 'center' : 'left',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, t('common:login')), __jsx(Button, {\n    size: \"small\",\n    className: classes.buttonLink,\n    href: routeLink.saas.register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    className: clsx(classes.icon, classes.signArrow),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"arrow_forward\"), t('common:login_create'))), __jsx(SocialAuth, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: classes.separator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, t('common:login_or'))), __jsx(ValidatorForm, {\n    onError: errors => console.log(errors),\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    className: classes.input,\n    label: t('common:login_email'),\n    onChange: handleChange('email'),\n    name: \"email\",\n    value: values.email,\n    validators: ['required', 'isEmail'],\n    errorMessages: ['This field is required', 'Email is not valid'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    type: \"password\",\n    className: classes.input,\n    label: t('common:login_password'),\n    validators: ['required'],\n    onChange: handleChange('password'),\n    errorMessages: ['This field is required'],\n    name: \"password\",\n    value: values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }))), __jsx(\"div\", {\n    className: classes.formHelper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: check,\n      onChange: e => handleCheck(e),\n      color: \"secondary\",\n      value: check,\n      className: classes.check,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }),\n    label: __jsx(\"span\", {\n      className: text.caption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, t('common:login_remember')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    size: \"small\",\n    className: classes.buttonLink,\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, t('common:login_forgot'))), __jsx(\"div\", {\n    className: classes.btnArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    fullWidth: true,\n    type: \"submit\",\n    color: \"secondary\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, t('common:continue'))))));\n}\n\nLogin.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['common'])(Login);","map":{"version":3,"sources":["D:/Resultarmind/linktree/rmcsm/resultarmind.com.br/components/Forms/Login.js"],"names":["React","useState","useEffect","PropTypes","clsx","Icon","Button","Typography","useMediaQuery","useTheme","FormControlLabel","Checkbox","Grid","ValidatorForm","TextValidator","withTranslation","routeLink","useText","SocialAuth","Title","AuthFrame","useStyles","Login","props","classes","text","theme","t","isMobile","breakpoints","down","values","setValues","email","password","addValidationRule","value","check","setCheck","handleChange","name","event","target","handleCheck","checked","handleSubmit","console","log","head","buttonLink","saas","register","icon","signArrow","separator","errors","input","formHelper","e","caption","btnArea","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { withTranslation } from '~/i18n';\nimport routeLink from '~/public/text/link';\nimport { useText } from '~/theme/common';\nimport SocialAuth from './SocialAuth';\nimport Title from '../Title/TitleSecondary';\nimport AuthFrame from './AuthFrame';\nimport useStyles from './form-style';\n\nfunction Login(props) {\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const { t } = props;\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n  });\n\n  useEffect(() => {\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n      if (value !== values.password) {\n        return false;\n      }\n      return true;\n    });\n  });\n\n  const [check, setCheck] = useState(false);\n\n  const handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value });\n  };\n\n  const handleCheck = event => {\n    setCheck(event.target.checked);\n  };\n\n  const handleSubmit = () => {\n    console.log('data submited');\n  };\n\n  return (\n    <AuthFrame title={t('common:login_title')} subtitle={t('common:login_subtitle')}>\n      <div>\n        <div className={classes.head}>\n          <Title align={isMobile ? 'center' : 'left'}>\n            {t('common:login')}\n          </Title>\n          <Button size=\"small\" className={classes.buttonLink} href={routeLink.saas.register}>\n            <Icon className={clsx(classes.icon, classes.signArrow)}>arrow_forward</Icon>\n            {t('common:login_create')}\n          </Button>\n        </div>\n        <SocialAuth />\n        <div className={classes.separator}>\n          <Typography>\n            {t('common:login_or')}\n          </Typography>\n        </div>\n        <ValidatorForm\n          onError={errors => console.log(errors)}\n          onSubmit={handleSubmit}\n        >\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextValidator\n                variant=\"filled\"\n                className={classes.input}\n                label={t('common:login_email')}\n                onChange={handleChange('email')}\n                name=\"email\"\n                value={values.email}\n                validators={['required', 'isEmail']}\n                errorMessages={['This field is required', 'Email is not valid']}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextValidator\n                variant=\"filled\"\n                type=\"password\"\n                className={classes.input}\n                label={t('common:login_password')}\n                validators={['required']}\n                onChange={handleChange('password')}\n                errorMessages={['This field is required']}\n                name=\"password\"\n                value={values.password}\n              />\n            </Grid>\n          </Grid>\n          <div className={classes.formHelper}>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={check}\n                  onChange={(e) => handleCheck(e)}\n                  color=\"secondary\"\n                  value={check}\n                  className={classes.check}\n                />\n              )}\n              label={(\n                <span className={text.caption}>\n                  {t('common:login_remember')}\n                </span>\n              )}\n            />\n            <Button size=\"small\" className={classes.buttonLink} href=\"#\">\n              {t('common:login_forgot')}\n            </Button>\n          </div>\n          <div className={classes.btnArea}>\n            <Button variant=\"contained\" fullWidth type=\"submit\" color=\"secondary\" size=\"large\">\n              {t('common:continue')}\n            </Button>\n          </div>\n        </ValidatorForm>\n      </div>\n    </AuthFrame>\n  );\n}\n\n\nLogin.propTypes = {\n  t: PropTypes.func.isRequired\n};\n\nexport default withTranslation(['common'])(Login);\n"]},"metadata":{},"sourceType":"module"}