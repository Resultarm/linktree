{"ast":null,"code":"import _defineProperty from \"/Users/franciscosantos/go/src/Works/rmcsm/resultarmind.com.br/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { withTranslation } from \"../../i18n\";\nimport routeLink from \"../../public/text/link\";\nimport { useText } from \"../../theme/common\";\nimport SocialAuth from './SocialAuth';\nimport Title from '../Title/TitleSecondary';\nimport AuthFrame from './AuthFrame';\nimport useStyles from './form-style';\n\nfunction Login(props) {\n  var classes = useStyles();\n  var text = useText();\n  var theme = useTheme();\n  var t = props.t;\n  var isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  var _useState = useState({\n    email: '',\n    password: ''\n  }),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  useEffect(function () {\n    ValidatorForm.addValidationRule('isPasswordMatch', function (value) {\n      if (value !== values.password) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n\n  var _useState2 = useState(false),\n      check = _useState2[0],\n      setCheck = _useState2[1];\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, event.target.value)));\n    };\n  };\n\n  var handleCheck = function handleCheck(event) {\n    setCheck(event.target.checked);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    console.log('data submited');\n  };\n\n  return __jsx(AuthFrame, {\n    title: t('common:login_title'),\n    subtitle: t('common:login_subtitle')\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: classes.head\n  }, __jsx(Title, {\n    align: isMobile ? 'center' : 'left'\n  }, t('common:login')), __jsx(Button, {\n    size: \"small\",\n    className: classes.buttonLink,\n    href: routeLink.saas.register\n  }, __jsx(Icon, {\n    className: clsx(classes.icon, classes.signArrow)\n  }, \"arrow_forward\"), t('common:login_create'))), __jsx(SocialAuth, null), __jsx(\"div\", {\n    className: classes.separator\n  }, __jsx(Typography, null, t('common:login_or'))), __jsx(ValidatorForm, {\n    onError: function onError(errors) {\n      return console.log(errors);\n    },\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    className: classes.input,\n    label: t('common:login_email'),\n    onChange: handleChange('email'),\n    name: \"email\",\n    value: values.email,\n    validators: ['required', 'isEmail'],\n    errorMessages: ['This field is required', 'Email is not valid']\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextValidator, {\n    variant: \"filled\",\n    type: \"password\",\n    className: classes.input,\n    label: t('common:login_password'),\n    validators: ['required'],\n    onChange: handleChange('password'),\n    errorMessages: ['This field is required'],\n    name: \"password\",\n    value: values.password\n  }))), __jsx(\"div\", {\n    className: classes.formHelper\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: check,\n      onChange: function onChange(e) {\n        return handleCheck(e);\n      },\n      color: \"secondary\",\n      value: check,\n      className: classes.check\n    }),\n    label: __jsx(\"span\", {\n      className: text.caption\n    }, t('common:login_remember'))\n  }), __jsx(Button, {\n    size: \"small\",\n    className: classes.buttonLink,\n    href: \"#\"\n  }, t('common:login_forgot'))), __jsx(\"div\", {\n    className: classes.btnArea\n  }, __jsx(Button, {\n    variant: \"contained\",\n    fullWidth: true,\n    type: \"submit\",\n    color: \"secondary\",\n    size: \"large\"\n  }, t('common:continue'))))));\n}\n\nexport default withTranslation(['common'])(Login);","map":null,"metadata":{},"sourceType":"module"}