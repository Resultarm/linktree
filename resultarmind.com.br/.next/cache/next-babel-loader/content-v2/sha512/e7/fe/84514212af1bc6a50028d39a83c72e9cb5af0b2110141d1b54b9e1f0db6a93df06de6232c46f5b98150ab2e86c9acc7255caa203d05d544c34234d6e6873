{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport clsx from \"clsx\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport YouTube from \"react-youtube\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport { useText } from \"../../theme/common\";\nimport { withTranslation } from \"../../i18n\";\nimport yt from \"../../youtube\";\nimport imgAPI from \"../../public/images/imgAPI\";\nimport useStyles from \"./banner-style\";\nimport api from \"../../services/api\";\nconst Transition = /*#__PURE__*/React.forwardRef(function Transition(props, ref) {\n  // eslint-disable-line\n  return __jsx(Zoom, _extends({\n    ref: ref\n  }, props));\n});\n\nfunction Banner(props) {\n  const classes = useStyles();\n  const text = useText();\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"lg\"));\n  const elem = useRef(null);\n  const {\n    0: hide,\n    1: setHide\n  } = useState(false);\n  const {\n    t\n  } = props;\n  const {\n    0: player,\n    1: setPlayer\n  } = useState([]);\n  const {\n    0: openPopup,\n    1: setOpenPopup\n  } = useState(false);\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n  useEffect(() => {\n    setUser(window.location.host.split(\".\")[0].split(\":\")[0]);\n  }, []);\n\n  const handleScroll = () => {\n    if (!elem.current) {\n      return;\n    }\n\n    const doc = document.documentElement;\n    const elTop = elem.current.offsetTop - 200;\n    const elBottom = elTop + elem.current.getBoundingClientRect().height;\n\n    if (doc.scrollTop > elTop && doc.scrollTop < elBottom) {\n      setHide(false);\n    } else {\n      setHide(true);\n    }\n  };\n\n  const handleClickOpen = () => {\n    if (yt.use) {\n      setOpenPopup(true);\n      player[0].playVideo();\n    }\n  };\n\n  const handleClose = () => {\n    setOpenPopup(false);\n    player[0].pauseVideo();\n  };\n\n  const _onReady = event => {\n    player.push(event.target);\n    setPlayer(player);\n  };\n\n  const opts = {\n    height: \"360\",\n    width: \"640\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 0,\n      controls: 1,\n      rel: 0,\n      showinfo: 1,\n      mute: 0,\n      origin: \"https://localhost:3002\"\n    }\n  };\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n  });\n  const {\n    0: banner,\n    1: setBanner\n  } = useState({});\n  useEffect(() => {\n    api.get(\"read-banner/\" + user).then(r => {\n      setBanner(r.data);\n    }).catch(e => {\n      var _e$response;\n\n      if (((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 404) {}\n    });\n  }, [user]);\n  return __jsx(\"div\", {\n    className: classes.root,\n    ref: elem\n  }, __jsx(Dialog, {\n    open: openPopup,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    classes: {\n      paper: classes.videoPopup\n    },\n    onClose: handleClose,\n    \"aria-labelledby\": \"alert-dialog-slide-title\",\n    \"aria-describedby\": \"alert-dialog-slide-description\"\n  }, __jsx(DialogTitle, {\n    id: \"alert-dialog-slide-title\"\n  }, t(\"\" + banner.title), __jsx(IconButton, {\n    onClick: handleClose,\n    className: classes.closeBtn\n  }, __jsx(CloseIcon, {\n    className: classes.icon\n  }))), __jsx(DialogContent, null, yt.use && __jsx(YouTube, {\n    videoId: \"KxZAdEGpYAw\",\n    onReady: _onReady,\n    opts: opts\n  }))), __jsx(\"div\", {\n    className: classes.decoration\n  }, __jsx(\"svg\", {\n    className: classes.leftDeco\n  }, __jsx(\"use\", {\n    xlinkHref: \"/images/saas/deco-bg-left.svg#main\"\n  })), __jsx(\"svg\", {\n    className: classes.rightDeco\n  }, __jsx(\"use\", {\n    xlinkHref: \"/images/saas/deco-bg-right.svg#main\"\n  }))), __jsx(Container, {\n    fixed: isDesktop\n  }, __jsx(\"div\", {\n    className: classes.sliderWrap\n  }, __jsx(\"div\", {\n    className: classes.text\n  }, __jsx(Typography, {\n    variant: \"h3\",\n    className: text.title\n  }, t(\"\" + banner.title)), __jsx(Typography, {\n    component: \"p\",\n    className: text.subtitle\n  }, t(\"\" + banner.content)), __jsx(\"div\", {\n    className: classes.btnArea\n  }, __jsx(ButtonBase, {\n    className: classes.playBtn,\n    onClick: handleClickOpen\n  }, __jsx(\"span\", {\n    className: classes.icon\n  }, __jsx(\"i\", {\n    className: \"ion-ios-play-outline\"\n  })), t(\"common:saas-landing.banner_watchvideo\")), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"large\",\n    href: \"/login\"\n  }, t(\"common:saas-landing.getstarted\")))), __jsx(\"div\", {\n    className: classes.illustration\n  }, __jsx(\"iframe\", {\n    width: \"680px\",\n    height: \"380px\",\n    src: banner.youtube,\n    allow: \"autoplay; encrypted-media\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })))), __jsx(\"div\", {\n    className: classes.deco\n  }, __jsx(Hidden, {\n    mdDown: true\n  }, __jsx(\"div\", {\n    className: clsx(classes.decoInner, hide && classes.hide)\n  }, __jsx(\"div\", {\n    className: clsx(classes.wave, classes.waveOne)\n  }), __jsx(\"div\", {\n    className: clsx(classes.wave, classes.waveTwo)\n  }))), __jsx(\"div\", {\n    className: clsx(classes.wave, classes.waveCover)\n  })));\n}\n\nexport default withTranslation([\"saas-landing\"])(Banner);","map":null,"metadata":{},"sourceType":"module"}